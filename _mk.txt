# Flask, без rest api + Tailwind
mk:
  q-choose:
    # modes (depend on estimation):
    #   abcdf: выбрать все правильные варианты, не уточняя он один или несколько.
    #          обязательно нужно указать все.
    todo:
      style question
      style answer
  q-input:
    # modes (depend on estimation):
    #   f: выбрать правильный вариант.
    #   dcba: ввести в поле input правильный ответ.
    # todo:
    #   render
    #   get answer
    #     mode-input
    #     style question mode-input
    #     style answer mode-input
    #   save-progress
  q-fill:
    # purpose:
    #   тоже самое что и input, но сразу задется несколько input вопросов.
    #   input доступен, когда оценка поднялась.
    #   например, заполнить грамматическую таблицу.
    # modes (depend on estimation):
    #   f: выбрать правильный вариант, переключиться на следующий.
    #   dcba: ввести в поле input правильный ответ, переключиться на следующий.
    # todo:
    #   get_question
    #   render
    #   get answer
    #   save-progress
  upd front:
    js-dynamic
    hotkeys
# todo:
#   edit question feature:
#     система обновления вопросов - сносить прогрес, не сносить id вопроса
#     запоминать не сколько раз праивльно ответил на вопрос, а сколько раз конкретных версий ответов было дано
#   q-speech: добавить зубрежку
#     тупо текст, на фронте не скрывать длину пропущеных слов
#     level 1: 3 раунда увеличивать количество пропусков
#   q-multi-input/q-multi-fill: добавить виды вопросов, где возможно несколько правильных ответов
#   q-догонялки:
#     input. level 3: тоже самое +догонялки: убежать от тени, при ошибке отбрасывать на слово назад
#     table. level 2: тоже самое +догонялки: убежать от тени, при ошибке отбрасывать на слово назад
